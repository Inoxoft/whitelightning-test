CXX = g++
CXXFLAGS = -std=c++14 -O2 -Wall -Wextra
TARGET = test_onnx_model
SOURCE = test_onnx_model.cpp

# Platform detection
UNAME_S := $(shell uname -s)

# ONNX Runtime paths
ifeq ($(UNAME_S),Darwin)
    # macOS
    ONNX_ROOT = ./onnxruntime-osx-universal2-1.22.0
    INCLUDES = -I$(ONNX_ROOT)/include
    LIBS = -L$(ONNX_ROOT)/lib -lonnxruntime -lpthread
else ifeq ($(UNAME_S),Linux)
    # Linux
    ONNX_ROOT = ./onnxruntime-linux-x64-1.22.0
    INCLUDES = -I$(ONNX_ROOT)/include
    LIBS = -L$(ONNX_ROOT)/lib -lonnxruntime -lpthread
    # Add rpath for runtime library loading
    LIBS += -Wl,-rpath,$(ONNX_ROOT)/lib
else
    # Fallback for other systems
    ONNX_ROOT = ./onnxruntime
    INCLUDES = -I$(ONNX_ROOT)/include
    LIBS = -L$(ONNX_ROOT)/lib -lonnxruntime -lpthread
endif

# Check if we have a symlinked onnxruntime directory
ifneq (,$(wildcard ./onnxruntime))
    ONNX_ROOT = ./onnxruntime
    INCLUDES = -I$(ONNX_ROOT)/include
    LIBS = -L$(ONNX_ROOT)/lib -lonnxruntime -lpthread
    ifeq ($(UNAME_S),Linux)
        LIBS += -Wl,-rpath,$(ONNX_ROOT)/lib
    endif
endif

.PHONY: all clean test

all: $(TARGET)

$(TARGET): $(SOURCE)
	@echo "üî® Building multiclass sigmoid C++ implementation..."
	@echo "üìç Platform: $(UNAME_S)"
	@echo "üîó ONNX Runtime: $(ONNX_ROOT)"
	@if [ ! -d "$(ONNX_ROOT)" ]; then \
		echo "‚ùå ONNX Runtime directory not found: $(ONNX_ROOT)"; \
		echo "üìã Available directories:"; \
		ls -la | grep onnxruntime || echo "No ONNX Runtime directories found"; \
	fi
	$(CXX) $(CXXFLAGS) $(INCLUDES) $(SOURCE) $(LIBS) -o $(TARGET)
	@echo "‚úÖ Build completed: $(TARGET)"

clean:
	@echo "üßπ Cleaning build artifacts..."
	rm -f $(TARGET)
	@echo "‚úÖ Clean completed"

test: $(TARGET)
	@echo "üöÄ Running multiclass sigmoid C++ tests..."
	@if [ -f model.onnx ] && [ -f vocab.json ] && [ -f scaler.json ]; then \
		echo "‚úÖ Model files found, running full tests"; \
		./$(TARGET); \
	else \
		echo "‚ö†Ô∏è Model files not found, running build verification"; \
		./$(TARGET); \
	fi 