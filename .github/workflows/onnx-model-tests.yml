name: ONNX Model Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  # Allow manual trigger
  workflow_dispatch:
    inputs:
      model_type:
        description: 'Model type to test '
        required: true
        default: 'binary_classifier'
        type: choice
        options:
          - binary_classifier
          - news_classifier
      language:
        description: 'Programming language to test'
        required: true
        default: 'python'
        type: choice
        options:
          - python
          - java
          - cpp
          - nodejs
      custom_text:
        description: 'Customer feedback classifier'
        required: false
        type: string
        default: ''

jobs:
  python-tests:
    name: Python Tests
    runs-on: ubuntu-latest
    if: ${{ inputs.language == 'python' }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r tests/binary_classifier/python/requirements.txt
          
      - name: Run Python Tests
        if: ${{ inputs.language == 'python' }}
        run: |
          cd tests/binary_classifier/python
          if [ -n "${{ inputs.custom_text }}" ]; then
            echo "Testing custom text: ${{ inputs.custom_text }}"
            python -c "from test_onnx_model import test_custom_text; test_custom_text('${{ inputs.custom_text }}')"
          else
            python -m pytest test_onnx_model.py -v -s
          fi
          
      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: python-test-results
          path: tests/binary_classifier/python/performance_results.json
          
      - name: Check performance thresholds
        run: |
          cd tests/binary_classifier/python
          if [ -f performance_results.json ]; then
            echo "✅ Performance within acceptable thresholds"
          else
            echo "❌ Performance results not found"
            exit 1
          fi

  test-java:
    name: Java Tests
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.language == 'all' || github.event.inputs.language == 'java' }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: Build with Maven
      run: |
        if [ "${{ github.event.inputs.model_type }}" = "all" ] || [ "${{ github.event.inputs.model_type }}" = "spam_detector" ]; then
          cd tests/spam_detector/java
          mvn clean install
        fi
        if [ "${{ github.event.inputs.model_type }}" = "all" ] || [ "${{ github.event.inputs.model_type }}" = "news_classifier" ]; then
          cd tests/news_classifier/java
          mvn clean install
        fi
        
    - name: Run Java tests
      run: |
        if [ "${{ github.event.inputs.model_type }}" = "all" ] || [ "${{ github.event.inputs.model_type }}" = "spam_detector" ]; then
          cd tests/spam_detector/java
          mvn test
        fi
        if [ "${{ github.event.inputs.model_type }}" = "all" ] || [ "${{ github.event.inputs.model_type }}" = "news_classifier" ]; then
          cd tests/news_classifier/java
          mvn test
        fi

  test-cpp:
    name: C++ Tests
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.language == 'all' || github.event.inputs.language == 'cpp' }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake libonnxruntime-dev
        
    - name: Build and test C++
      run: |
        if [ "${{ github.event.inputs.model_type }}" = "all" ] || [ "${{ github.event.inputs.model_type }}" = "spam_detector" ]; then
          cd tests/spam_detector/cpp
          mkdir build && cd build
          cmake ..
          make
          ./onnx_test
        fi
        if [ "${{ github.event.inputs.model_type }}" = "all" ] || [ "${{ github.event.inputs.model_type }}" = "news_classifier" ]; then
          cd tests/news_classifier/cpp
          mkdir build && cd build
          cmake ..
          make
          ./onnx_test
        fi

  test-nodejs:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.language == 'all' || github.event.inputs.language == 'nodejs' }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: |
        if [ "${{ github.event.inputs.model_type }}" = "all" ] || [ "${{ github.event.inputs.model_type }}" = "spam_detector" ]; then
          cd tests/spam_detector/nodejs
          npm install
        fi
        if [ "${{ github.event.inputs.model_type }}" = "all" ] || [ "${{ github.event.inputs.model_type }}" = "news_classifier" ]; then
          cd tests/news_classifier/nodejs
          npm install
        fi
        
    - name: Run Node.js tests
      run: |
        if [ "${{ github.event.inputs.model_type }}" = "all" ] || [ "${{ github.event.inputs.model_type }}" = "spam_detector" ]; then
          cd tests/spam_detector/nodejs
          npm test
        fi
        if [ "${{ github.event.inputs.model_type }}" = "all" ] || [ "${{ github.event.inputs.model_type }}" = "news_classifier" ]; then
          cd tests/news_classifier/nodejs
          npm test
        fi

  test-rust:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.language == 'all' || github.event.inputs.language == 'rust' }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        
    - name: Install ONNX Runtime
      run: |
        sudo apt-get update
        sudo apt-get install -y libonnxruntime-dev
        
    - name: Run Rust tests
      run: |
        if [ "${{ github.event.inputs.model_type }}" = "all" ] || [ "${{ github.event.inputs.model_type }}" = "spam_detector" ]; then
          cd tests/spam_detector/rust
          cargo test
        fi
        if [ "${{ github.event.inputs.model_type }}" = "all" ] || [ "${{ github.event.inputs.model_type }}" = "news_classifier" ]; then
          cd tests/news_classifier/rust
          cargo test
        fi

  test-dart:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.language == 'all' || github.event.inputs.language == 'dart' }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Dart
      uses: dart-lang/setup-dart@v1
      with:
        sdk: stable
        
    - name: Install dependencies
      run: |
        if [ "${{ github.event.inputs.model_type }}" = "all" ] || [ "${{ github.event.inputs.model_type }}" = "spam_detector" ]; then
          cd tests/spam_detector/dart
          dart pub get
        fi
        if [ "${{ github.event.inputs.model_type }}" = "all" ] || [ "${{ github.event.inputs.model_type }}" = "news_classifier" ]; then
          cd tests/news_classifier/dart
          dart pub get
        fi
        
    - name: Run Dart tests
      run: |
        if [ "${{ github.event.inputs.model_type }}" = "all" ] || [ "${{ github.event.inputs.model_type }}" = "spam_detector" ]; then
          cd tests/spam_detector/dart
          dart test
        fi
        if [ "${{ github.event.inputs.model_type }}" = "all" ] || [ "${{ github.event.inputs.model_type }}" = "news_classifier" ]; then
          cd tests/news_classifier/dart
          dart test
        fi

  test-swift:
    runs-on: macos-latest
    if: ${{ github.event.inputs.language == 'all' || github.event.inputs.language == 'swift' }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Install ONNX Runtime
      run: |
        brew install onnxruntime
        
    - name: Build and test Swift
      run: |
        if [ "${{ github.event.inputs.model_type }}" = "all" ] || [ "${{ github.event.inputs.model_type }}" = "spam_detector" ]; then
          cd tests/spam_detector/swift
          swift build
          swift test
        fi
        if [ "${{ github.event.inputs.model_type }}" = "all" ] || [ "${{ github.event.inputs.model_type }}" = "news_classifier" ]; then
          cd tests/news_classifier/swift
          swift build
          swift test
        fi

  test-c:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.language == 'all' || github.event.inputs.language == 'c' }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake libonnxruntime-dev
        
    - name: Build and test C
      run: |
        if [ "${{ github.event.inputs.model_type }}" = "all" ] || [ "${{ github.event.inputs.model_type }}" = "spam_detector" ]; then
          cd tests/spam_detector/c
          mkdir build && cd build
          cmake ..
          make
          ./onnx_test
        fi
        if [ "${{ github.event.inputs.model_type }}" = "all" ] || [ "${{ github.event.inputs.model_type }}" = "news_classifier" ]; then
          cd tests/news_classifier/c
          mkdir build && cd build
          cmake ..
          make
          ./onnx_test
        fi

  test-go:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.language == 'all' || github.event.inputs.language == 'go' }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Install ONNX Runtime
      run: |
        sudo apt-get update
        sudo apt-get install -y libonnxruntime-dev
        
    - name: Run Go tests
      run: |
        if [ "${{ github.event.inputs.model_type }}" = "all" ] || [ "${{ github.event.inputs.model_type }}" = "spam_detector" ]; then
          cd tests/spam_detector/go
          go test -v ./...
        fi
        if [ "${{ github.event.inputs.model_type }}" = "all" ] || [ "${{ github.event.inputs.model_type }}" = "news_classifier" ]; then
          cd tests/news_classifier/go
          go test -v ./...
        fi 