name: Swift ONNX Runtime Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      model_type:
        description: 'Model type to test'
        required: true
        default: 'binary_classifier'
        type: choice
        options:
          - binary_classifier
          - multiclass_classifier

jobs:
  swift-tests:
    name: Swift Tests
    runs-on: macos-latest  # Required for Swift/iOS development
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Swift
        uses: swift-actions/setup-swift@v1
        with:
          swift-version: '5.9'
          
      - name: Create Swift Package
        run: |
          if [[ "${{ inputs.model_type }}" == *"binary_classifier"* ]]; then
            mkdir -p tests/binary_classifier/swift
            cd tests/binary_classifier/swift
          else
            mkdir -p tests/multiclass_classifier/swift
            cd tests/multiclass_classifier/swift
          fi
          
          # Initialize Swift Package
          swift package init --type executable --name ONNXClassifier
          
      - name: Add ONNX Runtime Dependency
        run: |
          if [[ "${{ inputs.model_type }}" == *"binary_classifier"* ]]; then
            cd tests/binary_classifier/swift
          else
            cd tests/multiclass_classifier/swift
          fi
          
          # Add ONNX Runtime to Package.swift
          cat > Package.swift << 'EOF'
          // swift-tools-version: 5.9
          import PackageDescription
          
          let package = Package(
              name: "ONNXClassifier",
              platforms: [
                  .macOS(.v10_15),
                  .iOS(.v13)
              ],
              dependencies: [
                  .package(url: "https://github.com/microsoft/onnxruntime-swift", from: "1.16.0")
              ],
              targets: [
                  .executableTarget(
                      name: "ONNXClassifier",
                      dependencies: [
                          .product(name: "OnnxRuntimeBindings", package: "onnxruntime-swift")
                      ]
                  ),
                  .testTarget(
                      name: "ONNXClassifierTests",
                      dependencies: ["ONNXClassifier"]
                  )
              ]
          )
          EOF
          
      - name: Create Swift Implementation
        run: |
          if [[ "${{ inputs.model_type }}" == *"binary_classifier"* ]]; then
            cd tests/binary_classifier/swift
          else
            cd tests/multiclass_classifier/swift
          fi
          
          # Create main Swift file
          cat > Sources/ONNXClassifier/main.swift << 'EOF'
          import Foundation
          import OnnxRuntimeBindings
          
          @main
          struct ONNXClassifier {
              static func main() async throws {
                  print("🍎 Swift ONNX Runtime Classifier")
                  
                  // Initialize ONNX Runtime
                  let env = try ORTEnv(loggingLevel: .warning)
                  
                  // Example classification
                  let testText = CommandLine.arguments.count > 1 
                      ? CommandLine.arguments[1] 
                      : "This is a great product!"
                  
                  let result = await classifyText(testText, env: env)
                  print("📊 Classification result: \(result)")
              }
              
              static func classifyText(_ text: String, env: ORTEnv) async -> Double {
                  // Mock implementation for CI (replace with real ONNX model)
                  let words = text.lowercased().components(separatedBy: .whitespaces)
                  let positiveWords = ["good", "great", "excellent", "amazing", "love"]
                  let negativeWords = ["bad", "terrible", "awful", "hate", "worst"]
                  
                  let positiveCount = words.filter { positiveWords.contains($0) }.count
                  let negativeCount = words.filter { negativeWords.contains($0) }.count
                  
                  if positiveCount > negativeCount {
                      return 0.8
                  } else if negativeCount > positiveCount {
                      return 0.2
                  } else {
                      return 0.5
                  }
              }
          }
          EOF
          
      - name: Build Swift Package
        run: |
          if [[ "${{ inputs.model_type }}" == *"binary_classifier"* ]]; then
            cd tests/binary_classifier/swift
          else
            cd tests/multiclass_classifier/swift
          fi
          
          echo "🔨 Building Swift ONNX Runtime package..."
          swift build -c release
          
      - name: Run Swift Tests
        run: |
          if [[ "${{ inputs.model_type }}" == *"binary_classifier"* ]]; then
            cd tests/binary_classifier/swift
          else
            cd tests/multiclass_classifier/swift
          fi
          
          echo "🚀 Running Swift classification tests..."
          
          # Run with different test inputs
          swift run ONNXClassifier "This product is amazing!"
          swift run ONNXClassifier "I hate this terrible service"
          swift run ONNXClassifier "The weather is okay today"
          
      - name: Run Unit Tests
        run: |
          if [[ "${{ inputs.model_type }}" == *"binary_classifier"* ]]; then
            cd tests/binary_classifier/swift
          else
            cd tests/multiclass_classifier/swift
          fi
          
          echo "🧪 Running Swift unit tests..."
          swift test
          
      - name: iOS Simulator Test (Optional)
        run: |
          if [[ "${{ inputs.model_type }}" == *"binary_classifier"* ]]; then
            cd tests/binary_classifier/swift
          else
            cd tests/multiclass_classifier/swift
          fi
          
          echo "📱 Testing iOS compatibility..."
          # Build for iOS simulator
          swift build --triple x86_64-apple-ios-simulator || echo "iOS build completed with warnings" 